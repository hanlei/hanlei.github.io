<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 牧青日志</title>
    <link>http://blog.hanmq.com/post/</link>
    <description>Recent content in Posts on 牧青日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 16 Jun 2016 17:31:08 +0800</lastBuildDate>
    <atom:link href="http://blog.hanmq.com/post/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>vagrant挂载本地folder出错的解决方案</title>
      <link>http://blog.hanmq.com/post/vagrant-sync-folder/</link>
      <pubDate>Thu, 16 Jun 2016 17:31:08 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/vagrant-sync-folder/</guid>
      <description>

&lt;h2 id=&#34;问题:06d0f8b601a0ceba53174af4565e1f4a&#34;&gt;问题&lt;/h2&gt;

&lt;p&gt;vagrant CentOS7 基础镜像，Vagrantfile 配置文件通过config.vm.synced_folder挂载本地目录报错&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Vagrantfile

config.vm.synced_folder &amp;quot;./Download&amp;quot;, &amp;quot;/Download&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vagrant up 启动时报错&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Failed to mount folders in Linux guest. This is usually because
the &amp;quot;vboxsf&amp;quot; file system is not available. Please verify that
the guest additions are properly installed in the guest and
can work properly. The command attempted was:

mount -t vboxsf -o uid=`id -u vagrant`,gid=`getent group vagrant | cut -d: -f3` vagrant /vagrant
mount -t vboxsf -o uid=`id -u vagrant`,gid=`id -g vagrant` vagrant /vagrant

The error output from the last command was:

/sbin/mount.vboxsf: mounting failed with the error: No such device
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;原因:06d0f8b601a0ceba53174af4565e1f4a&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;查了一些网上的文章，最终查到，是因为执行了 yum update 导致 kernel-devel 的版本和系统当前版本不一样导致。&lt;/p&gt;

&lt;h2 id=&#34;解决方案:06d0f8b601a0ceba53174af4565e1f4a&#34;&gt;解决方案&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;yum install kernel-devel-$(uname -r)
yum install kernel-headers-$(uname -r)
yum install dkms

cd /opt/VBoxGuestAdditions-*/init  
sudo ./vboxadd setup
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>家常面</title>
      <link>http://blog.hanmq.com/post/noodles/</link>
      <pubDate>Wed, 15 Jun 2016 13:43:24 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/noodles/</guid>
      <description>&lt;p&gt;川味素面&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hanmq.com/img/noodles.jpg&#34; width = &#34;300&#34; alt=&#34;家常面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;希望你的人生如这碗面，朴素简单，却令人回味无穷。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim添加solarized配色方案及vimrc基础设置</title>
      <link>http://blog.hanmq.com/post/vimrc-solarized/</link>
      <pubDate>Tue, 14 Jun 2016 10:51:00 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/vimrc-solarized/</guid>
      <description>

&lt;p&gt;为vim添加漂亮的 Solarized 配色方案,效果如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hanmq.com/img/solarized-vim.png&#34; alt=&#34;Solarized 效果图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Solarized 支持大部分编辑器及IDE,&lt;a href=&#34;http://ethanschoonover.com/solarized&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;在这里。&lt;/p&gt;

&lt;h2 id=&#34;vim-配置-solarized:ea903bc52c5adaba264c2d005a5fef95&#34;&gt;vim 配置 Solarized&lt;/h2&gt;

&lt;h3 id=&#34;download:ea903bc52c5adaba264c2d005a5fef95&#34;&gt;download&lt;/h3&gt;

&lt;p&gt;从github &lt;a href=&#34;https://github.com/altercation/vim-colors-solarized&#34;&gt;https://github.com/altercation/vim-colors-solarized&lt;/a&gt; 下载Vim-only 的仓库,即可完成vim的配置。&lt;/p&gt;

&lt;p&gt;主仓库在 &lt;a href=&#34;https://github.com/altercation/solarized&#34;&gt;https://github.com/altercation/solarized&lt;/a&gt; ,只配置vim的话可以忽略。&lt;/p&gt;

&lt;h3 id=&#34;install:ea903bc52c5adaba264c2d005a5fef95&#34;&gt;install&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd vim-colors-solarized/colors
$ mv solarized.vim ~/.vim/colors/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改.vimrc文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax enable
set background=dark
colorscheme solarized
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;background 支持 dark 和 light 两种配色方案&lt;/p&gt;

&lt;h3 id=&#34;mac-terminal-支持:ea903bc52c5adaba264c2d005a5fef95&#34;&gt;mac terminal 支持&lt;/h3&gt;

&lt;p&gt;mac terminal 需要在 colorschem solarized 前添加一行配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:solarized_termcolors=256
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;官方的描述是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you do use the custom terminal colors, solarized.vim should work out of the box for you. If you are using a terminal emulator that supports 256 colors and don&amp;rsquo;t want to use the custom Solarized terminal colors, you will need to use the degraded 256 colorscheme.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;vimrc-基础设置:ea903bc52c5adaba264c2d005a5fef95&#34;&gt;vimrc 基础设置&lt;/h2&gt;

&lt;p&gt;分享一下vimrc的基础设置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax enable               &amp;quot;语法高亮&amp;quot;
set background=dark
let g:solarized_termcolors=256
colorscheme solarized

set nocompatible            &amp;quot;不兼容vi&amp;quot;
set nu                      &amp;quot;显示行数&amp;quot;
set expandtab               &amp;quot;用空格代替tab&amp;quot;
set shiftwidth=4            &amp;quot;缩进的字符个数&amp;quot; 
set tabstop=4               &amp;quot;一个tab是4个字符&amp;quot;
set cursorline              &amp;quot;为光标所在行加下划线&amp;quot;
set autoread                &amp;quot;文件在Vim之外修改过，自动重新读入&amp;quot;
set ignorecase              &amp;quot;检索时忽略大小&amp;quot;
set fileencodings=utf-8,gbk &amp;quot;使用utf-8或gbk打开文件&amp;quot;
set hls                     &amp;quot;检索时高亮显示匹配项&amp;quot;
set ruler                   &amp;quot;显示光标当前位置&amp;quot;
set laststatus=2            &amp;quot;总是显示状态栏&amp;quot;
set backspace=indent,eol,start
set nowrap                  &amp;quot;禁止折行&amp;quot;

&amp;quot;恢复文件关闭之前光标的位置&amp;quot;
if has(&amp;quot;autocmd&amp;quot;)
au BufReadPost * if line(&amp;quot;&#39;\&amp;quot;&amp;quot;) &amp;gt; 1 &amp;amp;&amp;amp; line(&amp;quot;&#39;\&amp;quot;&amp;quot;) &amp;lt;= line(&amp;quot;$&amp;quot;) | exe &amp;quot;normal! g&#39;\&amp;quot;&amp;quot; | endif
endif

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>字节转换</title>
      <link>http://blog.hanmq.com/post/b-convert/</link>
      <pubDate>Mon, 13 Jun 2016 11:42:29 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/b-convert/</guid>
      <description>&lt;p&gt;一个简单的字节转换 PHP 方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

/**
 * 字节转换
 *
 * @param $size int 转换字节大小
 * @param $digits int 要保留几位小数
 * @return string
 */
function size2mb($size, $digits = 2) {
    //单位数组，是必须1024进制依次的哦
    $unit = array(&#39;&#39;,&#39;K&#39;,&#39;M&#39;,&#39;G&#39;,&#39;T&#39;,&#39;P&#39;);

    //对数的基数
    $base = 1024;

    //字节数对1024取对数，值向下取整
    $i = floor(log($size,$base));

    return round($size / pow($base,$i), $digits).&#39; &#39;.$unit[$i] . &#39;B&#39;;
}

/*
echo size2mb(3245345);
输出 : 3.1 MB

echo size2mb(2343453245345);
输出 : 2.13 TB
*/


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CentOS 7 systemd 添加系统服务 nginx</title>
      <link>http://blog.hanmq.com/post/centos7-systemd-nginx/</link>
      <pubDate>Mon, 13 Jun 2016 10:16:09 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/centos7-systemd-nginx/</guid>
      <description>

&lt;p&gt;CentOS 7继承了RHEL 7的新的特性，例如强大的systemd，而systemd的使用也使得以往系统服务的/etc/init.d的启动脚本的方式就此改变，大幅提高了系统服务的运行效率。&lt;/p&gt;

&lt;h2 id=&#34;systemd:1f81d4506716a68c23227f65602dc467&#34;&gt;systemd:&lt;/h2&gt;

&lt;p&gt;CentOS 7的服务systemctl脚本存放在：/usr/lib/systemd/。
有系统（system）和用户（user）之分，
即：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;/usr/lib/systemd/system&lt;/p&gt;

&lt;p&gt;/usr/lib/systemd/user&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每一个服务以.service结尾，一般会分为3部分：[Unit]、[Service]和[Install]，就以nginx为例吧，具体内容如下：&lt;/p&gt;

&lt;h2 id=&#34;创建service:1f81d4506716a68c23227f65602dc467&#34;&gt;创建service:&lt;/h2&gt;

&lt;p&gt;在 /usr/lib/systemd/system 下创建nginx.service文件内容如下（看应用需求也可以在 /usr/lib/systemd/usr 下创建）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Unit]
Description=nginx - high performance web server
Documentation=http://nginx.org/en/docs/
After=network.target remote-fs.target nss-lookup.target
 
[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf
ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true
 
[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;unit:1f81d4506716a68c23227f65602dc467&#34;&gt;[Unit]&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Description : 服务的简单描述&lt;/p&gt;

&lt;p&gt;Documentation ： 服务文档&lt;/p&gt;

&lt;p&gt;After : 依赖，仅当依赖的服务启动之后再启动自定义的服务单元&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;service:1f81d4506716a68c23227f65602dc467&#34;&gt;[Service]&lt;/h2&gt;

&lt;p&gt;这个段是 .service 文件独有的，也是对于服务配置最重要的部分。这部分的配置选项非常多，主要分为服务生命周期控制和服务上下文配置两个方面&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Type : 启动类型simple、forking、oneshot、notify、dbus&lt;/p&gt;

&lt;p&gt;PIDFile ： pid文件路径&lt;/p&gt;

&lt;p&gt;ExecStartPre ：指定在启动执行 ExecStart 的命令前的准备工作，可以有多个，所有命令会按照文件中书写的顺序依次被执行&lt;/p&gt;

&lt;p&gt;ExecStart：这个参数是几乎每个 .service 文件都会有的，指定服务启动的主要命令，在每个配置文件中只能使用一次&lt;/p&gt;

&lt;p&gt;ExecReload：重新加载服务所需执行的主要命令&lt;/p&gt;

&lt;p&gt;ExecStop：指定在 ExecStop 命令执行后的收尾工作，也可以有多个&lt;/p&gt;

&lt;p&gt;PrivateTmp：True表示给服务分配独立的临时空间≈&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;install:1f81d4506716a68c23227f65602dc467&#34;&gt;[Install]&lt;/h2&gt;

&lt;p&gt;这个段中的配置与 Unit 有几分相似，但是这部分配置需要通过 systemctl enable 命令来激活，并且可以通过 systemctl disable 命令禁用。另外这部分配置的目标模块通常是特定启动级别的 .target 文件，用来使得服务在系统启动时自动运行。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WantedBy：上例中使用的是 “WantedBy=multi-user.target”， 表明当系统以多用户方式（默认的运行级别）启动时，这个服务需要被自动运行。当然还需要 systemctl enable 激活这个服务以后自动运行才会生效。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;操作service:1f81d4506716a68c23227f65602dc467&#34;&gt;操作Service:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#修改权限
$ sudo chmod +x /usr/lib/systemd/system/nginx.service

$ sudo systemctl enable nginx.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就会在/etc/systemd/system/multi-user.target.wants/目录下新建一个/usr/lib/systemd/system/nginx.service 文件的链接。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#启动服务
$ sudo systemctl start nginx.service

#查看日志
$ sudo journalctl -f -u nginx.service
-- Logs begin at 四 2015-06-25 17:32:20 CST. --
6月 25 10:28:24 Leco.lan systemd[1]: Starting nginx - high performance web server...
6月 25 10:28:24 Leco.lan nginx[7976]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
6月 25 10:28:24 Leco.lan nginx[7976]: nginx: configuration file /etc/nginx/nginx.conf test is successful
6月 25 10:28:24 Leco.lan systemd[1]: Started nginx - high performance web server.

#重启
$ sudo systemctl restart nginx.service

#重载
$ sudo systemctl reload nginx.service

#停止
$ sudo systemctl stop nginx.service
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>hello hugo</title>
      <link>http://blog.hanmq.com/post/hello-hugo/</link>
      <pubDate>Mon, 13 Jun 2016 09:40:05 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/hello-hugo/</guid>
      <description>&lt;p&gt;开张&lt;/p&gt;

&lt;p&gt;基于 &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主题 &lt;a href=&#34;https://github.com/coderzh/hugo-pacman-theme&#34; target=&#34;_blank&#34;&gt;hugo-pacman-theme&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
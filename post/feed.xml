<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 牧青日志</title>
    <link>http://blog.hanmq.com/post/</link>
    <description>Recent content in Posts on 牧青日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 25 Aug 2016 10:42:19 +0800</lastBuildDate>
    <atom:link href="http://blog.hanmq.com/post/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>redis-cli, redis 命令行</title>
      <link>http://blog.hanmq.com/post/rediscli/</link>
      <pubDate>Thu, 25 Aug 2016 10:42:19 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/rediscli/</guid>
      <description>

&lt;h1 id=&#34;redis-cli-the-redis-command-line-interface:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;redis-cli, the Redis command line interface&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;redis-cli&lt;/code&gt;是redis命令行接口，直接通过终端向Redis发送命令并获取服务端的结果。&lt;/p&gt;

&lt;p&gt;两种模式：用户输入命令并获取结果的交互模式（交互式解释器，REPL）；命令以&lt;code&gt;redis-cli&lt;/code&gt;参数的形式执行，并以标准输出的形式打印结果。&lt;/p&gt;

&lt;p&gt;在交互模式中，&lt;code&gt;redis-cli&lt;/code&gt;通过基本的编辑能力提供更好的操作体验。&lt;/p&gt;

&lt;p&gt;当然&lt;code&gt;redis-cli&lt;/code&gt;远不止这些。用户可以执行通过&lt;code&gt;redis-cli&lt;/code&gt;完成更复杂的工作，例如模拟slave打印master返回的数据流，检查Redis服务的延迟，甚至ASCII-art spectrogram of latency samples and frequencies 等等。&lt;/p&gt;

&lt;p&gt;这篇向导包含&lt;code&gt;redis-cli&lt;/code&gt;几个领域，从一些简单的例子开始后面会有一些高级案例。&lt;/p&gt;

&lt;p&gt;如果你将要频繁使用Redis或已经广泛的使用，花些时间熟悉他是一个不错的主意，在你了解全部命令行操作技巧后，你会发现你使用Redis的工作效率更高了。&lt;/p&gt;

&lt;h1 id=&#34;command-line-usage:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Command line usage&lt;/h1&gt;

&lt;p&gt;运行一条命令并将返回打印在标准输出上，仅仅是在执行&lt;code&gt;redis-cli&lt;/code&gt;后加一个参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli incr mycounter
(integer) 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令的回复是&amp;rdquo;7&amp;rdquo;。Redis的回复是有类型的（可能是字符串，数组，数字，空，错误），你可以在括号中识别他们的类型。有时我们想讲&lt;code&gt;redis-cli&lt;/code&gt;的输出作为另一个命令的输入、或将之写入到文件中。&lt;/p&gt;

&lt;p&gt;实际上当&lt;code&gt;redis-cli&lt;/code&gt;检测到标准输出是tty(终端)，他会展示附加信息是为了让人类更好的阅读，否则他会打开&amp;rdquo;raw output mode&amp;rdquo;，例如下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli incr mycounter &amp;gt; /tmp/output.txt
$ cat /tmp/output.txt
8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当CLI检测到输出不再是终端&lt;code&gt;(integer)&lt;/code&gt;被从输出中省略。你可以在终端中通过&lt;code&gt;--raw&lt;/code&gt;强制进行行输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --raw incr mycounter
9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样，你可以通过另一个命令&lt;code&gt;--no-raw&lt;/code&gt;在写文件或管道中强制使用便于人类阅读的模式。&lt;/p&gt;

&lt;h2 id=&#34;host-port-password-and-database:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Host, port, password and database&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;redis-cli&lt;/code&gt;默认会连接127.0.0.1端口6379的服务。如你所料，我们可以通过命令行选项轻松将之改变。使用&lt;code&gt;-h&lt;/code&gt;来指定不通的域名或IP地址。使用其他端口，使用&lt;code&gt;-p&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli -h redis15.localnet.org -p 6390 ping
PONG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果Redis实例有密码保护，通过&lt;code&gt;-a &amp;lt;password&amp;gt;&lt;/code&gt;选项运行&lt;code&gt;AUTH&lt;/code&gt;进行密码认证。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli -a myUnguessablePazzzzzword123 ping
PONG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, it&amp;rsquo;s possible to send a command that operates a on a database number
other than the default number zero by using the &lt;code&gt;-n &amp;lt;dbnum&amp;gt;&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli flushall
OK
$ redis-cli -n 1 incr a
(integer) 1
$ redis-cli -n 1 incr a
(integer) 2
$ redis-cli -n 2 incr a
(integer) 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-input-from-other-programs:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Getting input from other programs&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;redis-cli&lt;/code&gt;有两种方法可以从另一个命令的输出作为输入（一般是从标准输入）。其中一种方法是从*stdin*读取最后一个参数。例如，使用&lt;code&gt;-x&lt;/code&gt;选项来读取&lt;code&gt;/etc/services&lt;/code&gt;文件的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli -x set foo &amp;lt; /etc/services
OK
$ redis-cli getrange foo 0 50
&amp;quot;#\n# Network services, Internet style\n#\n# Note that &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以看到在上面的会话中，&lt;code&gt;SET&lt;/code&gt;命令的最后一个参数并没有明确的指名。参数仅仅&lt;code&gt;SET&lt;/code&gt; foo并没有指名实际的值。&lt;/p&gt;

&lt;p&gt;相反，&lt;code&gt;-x&lt;/code&gt;选项指名一个文件作为CLI的标准输入。因此输入被读取并作为命令的最后一个参数。这是一个很有用的脚本。&lt;/p&gt;

&lt;p&gt;另一种方法，是通过写一段包含有序命令的文件注入&lt;code&gt;redis-cli&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /tmp/commands.txt
set foo 100
incr foo
append foo xxx
get foo
$ cat /tmp/commands.txt | redis-cli
OK
(integer) 101
(integer) 6
&amp;quot;101xxx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;redis-cli&lt;/code&gt;会一条接一条的执行存储在&lt;code&gt;commands.txt&lt;/code&gt;中的所有命令，就像她们被用户输入一样。如果需要，字符串可以在文件中被引用，所以这就使带空格的参数或特殊字符成为可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /tmp/commands.txt
set foo &amp;quot;This is a single argument&amp;quot;
strlen foo
$ cat /tmp/commands.txt | redis-cli
OK
(integer) 25
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;continuously-run-the-same-command:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Continuously run the same command&lt;/h2&gt;

&lt;p&gt;在执行中，可以对相同的命令指定执行次数和间隔时间。这在不同的场景中很有用，比如我们要一直监控一些key的内容或&lt;code&gt;INFO&lt;/code&gt;字段的输出，或我们想模拟一个频繁的写事件（每个5秒向一个list推一个新条目）。&lt;/p&gt;

&lt;p&gt;这个特性由&lt;code&gt;-r &amp;lt;count&amp;gt;&lt;/code&gt;和&lt;code&gt;-i &amp;lt;delay&amp;gt;&lt;/code&gt;两个选项控制。第一个指明命令运行的册数，第二个指定不同命令之间的时间间隔，以秒为单位（可以通过小数例如0.1来代表100微秒）。&lt;/p&gt;

&lt;p&gt;默认间隔间隔（延迟）设为0，即是命令会被立刻执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli -r 5 incr foo
(integer) 1
(integer) 2
(integer) 3
(integer) 4
(integer) 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;-1&lt;/code&gt;作为计数，命令会被一直运行。&lt;/p&gt;

&lt;p&gt;监控RSS内存使用情况，使用下列命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli -r -1 -i 1 INFO | grep rss_human
used_memory_rss_human:1.38M
used_memory_rss_human:1.38M
used_memory_rss_human:1.38M
... a new line will be printed each second ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mass-insertion-of-data-using-redis-cli:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Mass insertion of data using redis-cli&lt;/h2&gt;

&lt;p&gt;使用&lt;code&gt;redis-cli&lt;/code&gt;做批量插入作为一个独立话题包含在另一个页面讨论，请访问
&lt;a href=&#34;http://blog.hanmq.com/topics/mass-insert&#34;&gt;大数据插入向导&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;csv-output:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;CSV output&lt;/h2&gt;

&lt;p&gt;有时你可能需要通过&lt;code&gt;redis-cli&lt;/code&gt;来从Redis向另一个外部程序快速的导出数据。这个需求可以通过CSV（Comma Separated Values）输出特性完成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli lpush mylist a b c d
(integer) 4
$ redis-cli --csv lrange mylist 0 -1
&amp;quot;d&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般不可能像这样导出整个数据库数据，只需要运行一个带有CSV输出的命令。&lt;/p&gt;

&lt;h2 id=&#34;running-lua-scripts:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Running Lua scripts&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;redis-cli&lt;/code&gt; has extensive support for using the new Lua debugging facility
of Lua scripting, available starting with Redis 3.2. For this feature, please
refer to the &lt;a href=&#34;http://blog.hanmq.com/topics/ldb&#34;&gt;Redis Lua debugger documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, even without using the debugger, you can use &lt;code&gt;redis-cli&lt;/code&gt; to
run scripts from a file in a way more comfortable compared to typing
the script interactively into the shell or as an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /tmp/script.lua
return redis.call(&#39;set&#39;,KEYS[1],ARGV[1])
$ redis-cli --eval /tmp/script.lua foo , bar
OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Redis &lt;code&gt;EVAL&lt;/code&gt; command takes the list of keys the script uses, and the
other non key arguments, as different arrays. When calling &lt;code&gt;EVAL&lt;/code&gt; you
provide the number of keys as a number. However with &lt;code&gt;redis-cli&lt;/code&gt; and using
the &lt;code&gt;--eval&lt;/code&gt; option above, there is no need to specify the number of keys
explicitly. Instead it uses the convention of separating keys and arguments
with a comma. This is why in the above call you see &lt;code&gt;foo , bar&lt;/code&gt; as arguments.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;foo&lt;/code&gt; will populate the &lt;code&gt;KEYS&lt;/code&gt; array, and &lt;code&gt;bar&lt;/code&gt; the &lt;code&gt;ARGV&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--eval&lt;/code&gt; option is useful when writing simple scripts. For more
complex work, using the Lua debugger is definitely more comfortable. It&amp;rsquo;s
possible to mix the two approaches, since the debugger also uses executing
scripts from an external file.&lt;/p&gt;

&lt;h1 id=&#34;interactive-mode:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Interactive mode&lt;/h1&gt;

&lt;p&gt;到目前为止，我们讨论了作为命令行程序如何使用Redis CLI。这个对于脚本呢和一些特定的测试是非常有用的，但是大部分人使用&lt;code&gt;redis-cli&lt;/code&gt;的大部分时间都是在交互模式。&lt;/p&gt;

&lt;p&gt;在交互模式中用户在提示行输入Redis命令。命令被发送到服务器，运行，回复被解析并以简单且便于阅读的形式呈现。&lt;/p&gt;

&lt;p&gt;在交互模式运行CLI并不需要任何特殊的需求 - 仅仅是不带任何参与来运行他：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli
127.0.0.1:6379&amp;gt; ping
PONG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字符串&lt;code&gt;127.0.0.1:6379&amp;gt;&lt;/code&gt;就是提示符。他提醒你你所连接的Redis实例。&lt;/p&gt;

&lt;p&gt;当你所连接的服务器改变，或是你所操作的数据库和数据库0不一样，提示符也会随之改变：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; select 2
OK
127.0.0.1:6379[2]&amp;gt; dbsize
(integer) 1
127.0.0.1:6379[2]&amp;gt; select 0
OK
127.0.0.1:6379&amp;gt; dbsize
(integer) 503
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;handling-connections-and-reconnections:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Handling connections and reconnections&lt;/h2&gt;

&lt;p&gt;在交互模式使用&lt;code&gt;connect&lt;/code&gt;命令并指名*hostname*和*port*可以连接到不同的实例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; connect metal 6379
metal:6379&amp;gt; ping
PONG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看到提示响应的改变。如果用户尝试连接一个不可达的实例，&lt;code&gt;redis-cli&lt;/code&gt;会进入离线模式并尝试在每次新命令进行重连：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; connect 127.0.0.1 9999
Could not connect to Redis at 127.0.0.1:9999: Connection refused
not connected&amp;gt; ping
Could not connect to Redis at 127.0.0.1:9999: Connection refused
not connected&amp;gt; ping
Could not connect to Redis at 127.0.0.1:9999: Connection refused
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在一次断开连接被检测到后，CLI一般会试图进行透明的重连：如果连接失败，会显示凑五信息并进入离线状态。下面就是一个断开连接并重连成功的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; debug restart
Could not connect to Redis at 127.0.0.1:6379: Connection refused
not connected&amp;gt; ping
PONG
127.0.0.1:6379&amp;gt; (now we are connected again)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当一个重连被执行后，&lt;code&gt;redis-cli&lt;/code&gt;会自动选择最后一个数据库序号。但是其他的连接状态都会丢失，比如一个我们正在处理的事务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli
127.0.0.1:6379&amp;gt; multi
OK
127.0.0.1:6379&amp;gt; ping
QUEUED

( here the server is manually restarted )

127.0.0.1:6379&amp;gt; exec
(error) ERR EXEC without MULTI
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般来说，类似案例在交互模式中使用CLI并不是一个问题，但是你需要知道这些限制。&lt;/p&gt;

&lt;h2 id=&#34;editing-history-and-completion:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Editing, history and completion&lt;/h2&gt;

&lt;p&gt;由于&lt;code&gt;redis-cli&lt;/code&gt;使用&lt;a href=&#34;http://github.com/antirez/linenoise&#34;&gt;linenoise line editing library&lt;/a&gt;, 他具有行编辑能力，并补依赖于&lt;code&gt;libreadline&lt;/code&gt;或其他类库。&lt;/p&gt;

&lt;p&gt;通过方向键（上和下）可以回顾命令执行历史，来避免一遍一遍的重复输入。&lt;/p&gt;

&lt;p&gt;CLI重启之间的操作历史被罐装在由环境变量定义的用户家目录中的&lt;code&gt;.rediscli_history&lt;/code&gt;的文件里。可以通过设置环境变量&lt;code&gt;REDISCLI_HISTFILE&lt;/code&gt;来使用其他文件名，并可以通过设置为&lt;code&gt;/dev/null&lt;/code&gt;来关掉历史命令。&lt;/p&gt;

&lt;p&gt;CLI可以通过按TAB键来补全命令，如下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; Z&amp;lt;TAB&amp;gt;
127.0.0.1:6379&amp;gt; ZADD&amp;lt;TAB&amp;gt;
127.0.0.1:6379&amp;gt; ZCARD&amp;lt;TAB&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-the-same-command-n-times:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Running the same command N times&lt;/h2&gt;

&lt;p&gt;可以在命令前预设同一个命令所需要执行的次数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; 5 incr mycounter
(integer) 1
(integer) 2
(integer) 3
(integer) 4
(integer) 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;showing-help-about-redis-commands:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Showing help about Redis commands&lt;/h2&gt;

&lt;p&gt;Redis有不少&lt;a href=&#34;http://blog.hanmq.com/commands&#34;&gt;命令&lt;/a&gt;，时不时你可能不能想起准确的参数。&lt;code&gt;redis-cli&lt;/code&gt;可以通过&lt;code&gt;help&lt;/code&gt;命令查找大部分命令提供在线帮助。该命令可以用两种方式使用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;help @&amp;lt;category&amp;gt;&lt;/code&gt; 显示指定类别下所有的命令。类别包括： &lt;code&gt;@generic&lt;/code&gt;, &lt;code&gt;@list&lt;/code&gt;, &lt;code&gt;@set&lt;/code&gt;, &lt;code&gt;@sorted_set&lt;/code&gt;, &lt;code&gt;@hash&lt;/code&gt;,
&lt;code&gt;@pubsub&lt;/code&gt;, &lt;code&gt;@transactions&lt;/code&gt;, &lt;code&gt;@connection&lt;/code&gt;, &lt;code&gt;@server&lt;/code&gt;, &lt;code&gt;@scripting&lt;/code&gt;,
&lt;code&gt;@hyperloglog&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help &amp;lt;commandname&amp;gt;&lt;/code&gt; 显示以参数指明的命令帮助信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如显示&lt;code&gt;PFADD&lt;/code&gt;的帮助信息，使用：&lt;/p&gt;

&lt;p&gt;127.0.0.1:6379&amp;gt; help PFADD&lt;/p&gt;

&lt;p&gt;PFADD key element [element &amp;hellip;]
  summary: Adds the specified elements to the specified HyperLogLog.
  since: 2.8.9&lt;/p&gt;

&lt;p&gt;记住，&lt;code&gt;help&lt;/code&gt;也支持TAB补全。&lt;/p&gt;

&lt;h2 id=&#34;clearing-the-terminal-screen:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Clearing the terminal screen&lt;/h2&gt;

&lt;p&gt;在交互模式中使用&lt;code&gt;clear&lt;/code&gt;命令来清理终端屏幕。&lt;/p&gt;

&lt;h1 id=&#34;special-modes-of-operation:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Special modes of operation&lt;/h1&gt;

&lt;p&gt;到目前为止我们看到了&lt;code&gt;redis-cli&lt;/code&gt;的两个主要的模式。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;命令行执行Redis命令&lt;/li&gt;
&lt;li&gt;&amp;ldquo;REPL-like&amp;rdquo;交互模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CLI包括其他一些有关于Redis的附加任务，会在下面的部门解释：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;持续监控Redis服务状态工具。&lt;/li&gt;
&lt;li&gt;扫描Redis数据库的超大keys。&lt;/li&gt;
&lt;li&gt;正则扫描key space。&lt;/li&gt;
&lt;li&gt;作为&lt;a href=&#34;http://blog.hanmq.com/topics/pubsub&#34;&gt;Pub/Sub&lt;/a&gt;客户端订阅信道。&lt;/li&gt;
&lt;li&gt;监控命令在Redis实例的执行。&lt;/li&gt;
&lt;li&gt;多重方式检查Redis服务的&lt;a href=&#34;http://blog.hanmq.com/topics/latency&#34;&gt;延迟&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;检查本机的调度延迟。&lt;/li&gt;
&lt;li&gt;从远程Redis服务传输RDB备份。&lt;/li&gt;
&lt;li&gt;作为Redis slave展示 slave的接收。&lt;/li&gt;
&lt;li&gt;模拟&lt;a href=&#34;http://blog.hanmq.com/topics/lru-cache&#34;&gt;LRU&lt;/a&gt;工作负载来展示keys hits。&lt;/li&gt;
&lt;li&gt;Lua debugger客户端。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;continuous-stats-mode:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Continuous stats mode&lt;/h2&gt;

&lt;p&gt;这可能是一个&lt;code&gt;redis-cli&lt;/code&gt;最补为人所知的一个特性，而又是一个在实际操作中辅助查看Redis实例非常有用的。&lt;/p&gt;

&lt;p&gt;开启该模式，需要使用&lt;code&gt;--stat&lt;/code&gt;选项。&lt;/p&gt;

&lt;p&gt;在这个模式里，输出明确的展示了CLI的表现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --stat
------- data ------ --------------------- load -------------------- - child -
keys       mem      clients blocked requests            connections          
809810     982.12M  14656   0       60074309086 (+2130) 36443108    
809810     983.05M  14657   0       60074311313 (+2227) 36443109    
809807     984.86M  14656   0       60074313665 (+2352) 36443109    
809813     984.60M  14657   0       60074315634 (+1969) 36443110    
809812     985.67M  14656   0       60074318038 (+2404) 36443110    
809814     983.02M  14657   0       60074320361 (+2323) 36443111    
809816     984.98M  14657   0       60074322850 (+2489) 36443112 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这个模式中，每秒会打印一行包含了当前服务有用的数据及和前一秒的差量信息。你可以很容易的理解内存使用发生了什么，用户的连接数和其他四个。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-i &amp;lt;interval&amp;gt;&lt;/code&gt;选项可以改变发出新行的频率。默认是1秒。&lt;/p&gt;

&lt;h2 id=&#34;scanning-for-big-keys:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Scanning for big keys&lt;/h2&gt;

&lt;p&gt;在这个特别的模式中，&lt;code&gt;redis-cli&lt;/code&gt;是key空间分析者。他会扫描数据集的大keys，还会提供关于数据的类型信息。通过&lt;code&gt;--bigkeys&lt;/code&gt;命令开启该模式，系统会提供一个比较详细的输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --bigkeys

# Scanning the entire keyspace to find biggest keys as well as
# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec
# per 100 SCAN commands (not usually needed).

[00.00%] Biggest hash   found so far &#39;SYNC:uhs:1868564&#39; with 7 fields
[00.00%] Biggest hash   found so far &#39;SYNC:uhs:1588779&#39; with 12 fields
[00.00%] Biggest hash   found so far &#39;SYNC:uhs:2384872&#39; with 20 fields
[00.00%] Biggest string found so far &#39;SYNC:REPO:CV:1265088:group&#39; with 7 bytes
[00.00%] Biggest string found so far &#39;SYNC:REPO:CV:1104162:address&#39; with 10 bytes
[00.00%] Biggest string found so far &#39;CA:TICKET:jSrZGX-OLOaZfEOt1gh7pG0YSTSCD762&#39; with 16 bytes
[00.01%] Biggest string found so far &#39;BYS:area_id_341800&#39; with 63 bytes
[00.01%] Biggest string found so far &#39;oauth:access_token:HatMrP1fMEUsK9EuvtgFfl2G22aOC64A&#39; with 791 bytes
[00.04%] Biggest hash   found so far &#39;SYNC:uhs:1273501&#39; with 21 fields
[00.78%] Biggest set    found so far &#39;spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:1033495&#39; with 1 members
[00.95%] Biggest hash   found so far &#39;SYNC:uhs:1395077&#39; with 22 fields
[01.03%] Biggest string found so far &#39;SHOP:area_city_list_id_530800&#39; with 1042 bytes
[02.67%] Biggest set    found so far &#39;spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:2570714&#39; with 11 members
[03.05%] Biggest string found so far &#39;ESHOP-ALPHA:SESS:6u1t5bobgd6jvq3g872jlljs11&#39; with 5710 bytes
[03.12%] Biggest set    found so far &#39;spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:1439786&#39; with 247 members
[09.50%] Biggest string found so far &#39;CLOUD:1355047LISTS&#39; with 73064 bytes
[09.52%] Biggest hash   found so far &#39;SYNC:uhs:2604126&#39; with 23 fields
[18.10%] Biggest hash   found so far &#39;WQP:151103&#39; with 24 fields
[46.64%] Biggest hash   found so far &#39;BYK:150922&#39; with 26 fields

-------- summary -------

Sampled 799395 keys in the keyspace!
Total key length in bytes is 19897258 (avg len 24.89)

Biggest string found &#39;CLOUD:1355047LISTS&#39; has 73064 bytes
Biggest    set found &#39;spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:1439786&#39; has 247 members
Biggest   hash found &#39;BYK:150922&#39; has 26 fields

464437 strings with 5936000 bytes (58.10% of keys, avg size 12.78)
0 lists with 0 items (00.00% of keys, avg size 0.00)
233 sets with 2512 members (00.03% of keys, avg size 10.78)
334725 hashs with 4638505 fields (41.87% of keys, avg size 13.86)
0 zsets with 0 members (00.00% of keys, avg size 0.00)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在输出的第一部分，每一个比前一个更大的key（类型相同）都会上报。总结部分提供一个Redis实例内部数据的总体概要。&lt;/p&gt;

&lt;p&gt;程序使用&lt;code&gt;SCAN&lt;/code&gt;命令，所以在面对繁忙服务时不会影响操作，&lt;code&gt;-i&lt;/code&gt;选项可以用来指定每100个请求来锁死扫描程序的分数。例如，&lt;code&gt;-i 0.1&lt;/code&gt;会降低程序的执行速度，单会降低服务的负载。&lt;/p&gt;

&lt;p&gt;总结会报告每次被找到的大keys的清洁器。初始输出会在运行时提供一些有趣信息。&lt;/p&gt;

&lt;p&gt;Note that the summary also reports in a cleaner form the biggest keys found
for each time. The initial output is just to provide some interesting info
ASAP if running against a very large data set.&lt;/p&gt;

&lt;h2 id=&#34;getting-a-list-of-keys:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Getting a list of keys&lt;/h2&gt;

&lt;p&gt;有一种扫描key空间的方法，不会去阻塞Redis服务（&lt;code&gt;KEYS *&lt;/code&gt;命令就会阻塞服务），并打印所有的键名或通过正则过滤。这个模式，就像&lt;code&gt;--bigkeys&lt;/code&gt;选线，使用&lt;code&gt;SCAN&lt;/code&gt;命令，在数据集变化时键可能会上报多次，但是不会丢掉任何一个在迭代开始后存在的键。因为使用了了&lt;code&gt;--scan&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --scan | head -10
key-419
key-71
key-236
key-50
key-38
key-458
key-453
key-499
key-446
key-371
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;head -10&lt;/code&gt;用于只打印输出的第一部分。&lt;/p&gt;

&lt;p&gt;可以通过&lt;code&gt;--pattern&lt;/code&gt;选项进行正则过滤。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --scan --pattern &#39;*-11*&#39;
key-114
key-117
key-118
key-113
key-115
key-112
key-119
key-11
key-111
key-110
key-116
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;wc&lt;/code&gt;命令可以通过管道来对特殊对象进行计数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --scan --pattern &#39;user:*&#39; | wc -l
3829433
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pub-sub-mode:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Pub/sub mode&lt;/h2&gt;

&lt;p&gt;CLI可以通过&lt;code&gt;PUBLISH&lt;/code&gt;命令在Redis Pub/Sub通道中发布消息。&lt;code&gt;PUBLISH&lt;/code&gt;命令被预期为和其他命令非常类似。订阅通道接受消息是不同的 - 在这种情况我们需要锁住并等待消息，所以这个在&lt;code&gt;redis-cli&lt;/code&gt;被实现为一种特殊的模式。不同于其他特殊模式，这个模式并不使用特殊的选项，不论在交互模式中还是非交互模式中，仅仅需要使用&lt;code&gt;SUBSCRIBE&lt;/code&gt;和&lt;code&gt;PSUBSCRIBE&lt;/code&gt;命令。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli psubscribe &#39;*&#39;
Reading messages... (press Ctrl-C to quit)
1) &amp;quot;psubscribe&amp;quot;
2) &amp;quot;*&amp;quot;
3) (integer) 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*reading messages*消息表明我们进入Pub/Sub模式。&lt;/p&gt;

&lt;p&gt;当另一个客户端在某些通道中发布某些消息，可以使用&lt;code&gt;redis-cli PUBLISH mychannel mymessage&lt;/code&gt;，CLI在Pub/Sub模式中会有如下信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) &amp;quot;pmessage&amp;quot;
2) &amp;quot;*&amp;quot;
3) &amp;quot;mychannel&amp;quot;
4) &amp;quot;mymessage&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这对于Pub/Sub问题的debug非常有用。&lt;/p&gt;

&lt;p&gt;输入&lt;code&gt;CTRL-C&lt;/code&gt;退出Pub/Sub模式。&lt;/p&gt;

&lt;h2 id=&#34;monitoring-commands-executed-in-redis:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Monitoring commands executed in Redis&lt;/h2&gt;

&lt;p&gt;和Pub/Sub模式类似，在输入&lt;code&gt;MONITOR&lt;/code&gt;会自动进入监控模式。他会输出所有Redis实例接收到的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli monitor
OK
1460100081.165665 [0 127.0.0.1:51706] &amp;quot;set&amp;quot; &amp;quot;foo&amp;quot; &amp;quot;bar&amp;quot;
1460100083.053365 [0 127.0.0.1:51707] &amp;quot;get&amp;quot; &amp;quot;foo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里可以对输出使用管到，因此你可以通过例如&lt;code&gt;grep&lt;/code&gt;正则监控。&lt;/p&gt;

&lt;h2 id=&#34;monitoring-the-latency-of-redis-instances:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Monitoring the latency of Redis instances&lt;/h2&gt;

&lt;p&gt;在Redis上下文的延迟是非常紧张的，延迟涉及到多个应用的部分，从客户端的类库到网络堆栈，再到Redis实例自己本身。&lt;/p&gt;

&lt;p&gt;CLI有多种设备研究Redis实例的延迟，理解延迟的最大值，平均值和分布。&lt;/p&gt;

&lt;p&gt;通过&lt;code&gt;--latency&lt;/code&gt;选项进行基本的延迟检查。使用这个命令，CLI会循环向Redis实例发送&lt;code&gt;PING&lt;/code&gt;命令，根据消息回复的时间来衡量延时。每秒发送100次，状态会实时更新到console：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --latency
min: 0, max: 1, avg: 0.19 (427 samples)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;状态结果以微秒为单位。一般的，一个高速的实例的平均延迟会被稍稍高估，因为系统的核心调度也在运行&lt;code&gt;redis-cli&lt;/code&gt;，所以0.19的平均延迟实际可能是0.01或更少。一般这都不是什么大问题，毕竟只是几微秒。&lt;/p&gt;

&lt;p&gt;有时我们要了解最大延迟和平均延迟在一个时间段的演变。可以使用&lt;code&gt;--latency-history&lt;/code&gt;：他和&lt;code&gt;--latency&lt;/code&gt;的工作原理完全相同，只是每15秒（默认）会启动一个新会话:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --latency-history
min: 0, max: 1, avg: 0.14 (1314 samples) -- 15.01 seconds range
min: 0, max: 1, avg: 0.18 (1299 samples) -- 15.00 seconds range
min: 0, max: 1, avg: 0.20 (113 samples)^C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以通过&lt;code&gt;-i &amp;lt;interval&amp;gt;&lt;/code&gt;选项来改变会话采样时长。&lt;/p&gt;

&lt;p&gt;有色彩终端的延迟光谱是更高级的研究延迟工具，但对于没有经验的用户会稍显困难不太容易理解。你可以看到不同ASCII字符表明不同的延迟图。这种模式使用&lt;code&gt;--latency-dist&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --latency-dist
(output not displayed, requires a color terminal, try it!)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另一个&lt;code&gt;redis-cli&lt;/code&gt;内置很漂亮但并不常用的延迟工具。他并不检查redis实例的延迟，但是检测电脑运行&lt;code&gt;redis-cli&lt;/code&gt;的延迟。这是哪个延迟？在内核调度的延迟，虚拟化实例管理程序的延迟等等。&lt;/p&gt;

&lt;p&gt;由于程序的不透明，我们称之为*固有延迟*，
We call it &lt;em&gt;intrinsic latency&lt;/em&gt; because it&amp;rsquo;s opaque to the programmer, mostly.
If your Redis instance has bad latency regardless of all the obvious things
that may be the source cause, it&amp;rsquo;s worth to check what&amp;rsquo;s the best your system
can do by running &lt;code&gt;redis-cli&lt;/code&gt; in this special mode directly in the system you
are running Redis servers on.&lt;/p&gt;

&lt;p&gt;测量固有延迟是底线，Redis不能优于系统。使用&lt;code&gt;--intrinsic-latency &amp;lt;test-time&amp;gt;&lt;/code&gt;运行。测试时间以秒为单位，指明&lt;code&gt;redis-cli&lt;/code&gt;检查系统延时的时间。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./redis-cli --intrinsic-latency 5
Max latency so far: 1 microseconds.
Max latency so far: 7 microseconds.
Max latency so far: 9 microseconds.
Max latency so far: 11 microseconds.
Max latency so far: 13 microseconds.
Max latency so far: 15 microseconds.
Max latency so far: 34 microseconds.
Max latency so far: 82 microseconds.
Max latency so far: 586 microseconds.
Max latency so far: 739 microseconds.

65433042 total runs (avg latency: 0.0764 microseconds / 764.14 nanoseconds per run).
Worst run took 9671x longer than the average latency.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IMPORTANT: this command must be executed on the computer you want to run Redis
server on, not on a different host. It does not even connect to a Redis instance
and performs the test only locally.&lt;/p&gt;

&lt;p&gt;In the above case, my system cannot do better than 739 microseconds of worst
case latency, so I can expect certain queries to run in a bit less than 1
millisecond from time to time.&lt;/p&gt;

&lt;h2 id=&#34;remote-backups-of-rdb-files:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Remote backups of RDB files&lt;/h2&gt;

&lt;p&gt;从Redis复制的第一个同步开始，master和slave就通过RDB格式文件交换整个数据集。这个特性为开发&lt;code&gt;redis-cli&lt;/code&gt;提供远程备份的便利，这允从任何一个Redis实例许传输RDB格式文件到运行&lt;code&gt;redis-cli&lt;/code&gt;的本地电脑。开启这个模式，使用&lt;code&gt;--rdb &amp;lt;dest-filename&amp;gt;&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --rdb /tmp/dump.rdb
SYNC sent to master, writing 13256 bytes to &#39;/tmp/dump.rdb&#39;
Transfer finished with success.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个简单有效的方法来确保你得Redis实例具有容灾的RDB备份。我们可以使用这个命令或&lt;code&gt;cron&lt;/code&gt;，确保检查命令的返回值。如果是一个非零，表明遇到了一个错误，如下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --rdb /tmp/dump.rdb
SYNC with master failed: -ERR Can&#39;t SYNC while not connected with my master
$ echo $?
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;slave-mode:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Slave mode&lt;/h2&gt;

&lt;p&gt;CLI的salve模式作为Redis开发者和debug操作的高级特性。他可以检查由master发送给slaves的复制流，用于传播写操作给副本。使用&lt;code&gt;--slave&lt;/code&gt;选项。像下面这样工作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --slave
SYNC with master, discarding 13256 bytes of bulk transfer...
SYNC done. Logging commands from master.
&amp;quot;PING&amp;quot;
&amp;quot;SELECT&amp;quot;,&amp;quot;0&amp;quot;
&amp;quot;set&amp;quot;,&amp;quot;foo&amp;quot;,&amp;quot;bar&amp;quot;
&amp;quot;PING&amp;quot;
&amp;quot;incr&amp;quot;,&amp;quot;myconuter&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command begins by discarding the RDB file of the first synchronization
and then logs each command received as in CSV format.&lt;/p&gt;

&lt;p&gt;If you think some of the commands are not replicated correctly in your slaves
this is a good way to check what&amp;rsquo;s happening, and also useful information
in order to improve the bug report.&lt;/p&gt;

&lt;h2 id=&#34;performing-an-lru-simulation:e5f208cb46ba33478a6c9775c9129e9a&#34;&gt;Performing an LRU simulation&lt;/h2&gt;

&lt;p&gt;Redis is often used as a cache with &lt;a href=&#34;http://blog.hanmq.com/topics/lru-cache&#34;&gt;LRU eviction&lt;/a&gt;.
Depending on the number of keys and the amount of memory allocated for the
cache (specified via the &lt;code&gt;maxmemory&lt;/code&gt; directive), the amount of cache hits
and misses will change. Sometimes, simulating the rate of hits is very
useful to correctly provision your cache.&lt;/p&gt;

&lt;p&gt;The CLI has a special mode where it performs a simulation of GET and SET
operations, using an 80-20% power law distribution in the requests pattern.
This means that 20% of keys will be requested 80% of times, which is a
common distribution in caching scenarios.&lt;/p&gt;

&lt;p&gt;Theoretically, given the distribution of the requests and the Redis memory
overhead, it should be possible to compute the hit rate analytically with
with a mathematical formula. However, Redis can be configured with
different LRU settings (number of samples) and LRU&amp;rsquo;s implementation, which
is approximated in Redis, changes a lot between different versions. Similarly
the amount of memory per key may change between versions. That is why this
tool was built: its main motivation was for testing the quality of Redis&amp;rsquo; LRU
implementation, but now is also useful in for testing how a given version
behaves with the settings you had in mind for your deployment.&lt;/p&gt;

&lt;p&gt;In order to use this mode, you need to specify the amount of keys
in the test. You also need to configure a &lt;code&gt;maxmemory&lt;/code&gt; setting that
makes sense as a first try.&lt;/p&gt;

&lt;p&gt;IMPORTANT NOTE: Configuring the &lt;code&gt;maxmemory&lt;/code&gt; setting in the Redis configuration
is crucial: if there is no cap to the maximum memory usage, the hit will
eventually be 100% since all the keys can be stored in memory. Or if you
specify too many keys and no maximum memory, eventually all the computer
RAM will be used. It is also needed to configure an appropriate
&lt;em&gt;maxmemory policy&lt;/em&gt;, most of the times what you want is &lt;code&gt;allkeys-lru&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the following example I configured a memory limit of 100MB, and an LRU
simulation using 10 million keys.&lt;/p&gt;

&lt;p&gt;WARNING: the test uses pipelining and will stress the server, don&amp;rsquo;t use it
with production instances.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./redis-cli --lru-test 10000000
156000 Gets/sec | Hits: 4552 (2.92%) | Misses: 151448 (97.08%)
153750 Gets/sec | Hits: 12906 (8.39%) | Misses: 140844 (91.61%)
159250 Gets/sec | Hits: 21811 (13.70%) | Misses: 137439 (86.30%)
151000 Gets/sec | Hits: 27615 (18.29%) | Misses: 123385 (81.71%)
145000 Gets/sec | Hits: 32791 (22.61%) | Misses: 112209 (77.39%)
157750 Gets/sec | Hits: 42178 (26.74%) | Misses: 115572 (73.26%)
154500 Gets/sec | Hits: 47418 (30.69%) | Misses: 107082 (69.31%)
151250 Gets/sec | Hits: 51636 (34.14%) | Misses: 99614 (65.86%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The program shows stats every second. As you see, in the first seconds
the cache starts to be populated. The misses rate later stabilizes into
the actual figure we can expect in the long time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;120750 Gets/sec | Hits: 48774 (40.39%) | Misses: 71976 (59.61%)
122500 Gets/sec | Hits: 49052 (40.04%) | Misses: 73448 (59.96%)
127000 Gets/sec | Hits: 50870 (40.06%) | Misses: 76130 (59.94%)
124250 Gets/sec | Hits: 50147 (40.36%) | Misses: 74103 (59.64%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A miss rage of 59% may not be acceptable for our use case. So we know that
100MB of memory are no enough. Let&amp;rsquo;s try with half gigabyte. After a few
minutes we&amp;rsquo;ll see the output to stabilize to the following figures:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;140000 Gets/sec | Hits: 135376 (96.70%) | Misses: 4624 (3.30%)
141250 Gets/sec | Hits: 136523 (96.65%) | Misses: 4727 (3.35%)
140250 Gets/sec | Hits: 135457 (96.58%) | Misses: 4793 (3.42%)
140500 Gets/sec | Hits: 135947 (96.76%) | Misses: 4553 (3.24%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we know that with 500MB we are going well enough for our number of
keys (10 millions) and distribution (80-20 style).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>oauth2 简介</title>
      <link>http://blog.hanmq.com/post/oauth2-introduction/</link>
      <pubDate>Fri, 17 Jun 2016 16:11:49 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/oauth2-introduction/</guid>
      <description>

&lt;h1 id=&#34;简介:d4ca46e8668838d4afbf263145f86af7&#34;&gt;简介&lt;/h1&gt;

&lt;p&gt;在传统的服务器-客户端认证模型中，客户端通过服务器资源拥有者的认证，向服务器请求访问受限的资源（私有资源）。第三方应用程序访问受限资源，资源拥有者要向第三方应用分享他的证书。这就产生了一系列的问题和限制：&lt;/p&gt;

&lt;h2 id=&#34;在使用中-第三方应用程序需要存储资源拥有者的证书-典型的例子就是明文的密码:d4ca46e8668838d4afbf263145f86af7&#34;&gt;在使用中，第三方应用程序需要存储资源拥有者的证书，典型的例子就是明文的密码。&lt;/h2&gt;

&lt;h2 id=&#34;服务端需要支持密码认证-尽管密码认证方式有它固有的安全隐患:d4ca46e8668838d4afbf263145f86af7&#34;&gt;服务端需要支持密码认证，尽管密码认证方式有它固有的安全隐患。&lt;/h2&gt;

&lt;h2 id=&#34;第三方应用程序获得访问资源拥有者受限资源的权限-资源拥有者没有任何能力限制第三方应用的访问时效-duration-和被访问资源范围-subset:d4ca46e8668838d4afbf263145f86af7&#34;&gt;第三方应用程序获得访问资源拥有者受限资源的权限，资源拥有者没有任何能力限制第三方应用的访问时效(duration)和被访问资源范围(subset)。&lt;/h2&gt;

&lt;h2 id=&#34;资源拥有者不能撤销某个第三方应用的访问权限-只能通过修改第三方密码-撤销整个第三方应用的访问权限:d4ca46e8668838d4afbf263145f86af7&#34;&gt;资源拥有者不能撤销某个第三方应用的访问权限，只能通过修改第三方密码，撤销整个第三方应用的访问权限。&lt;/h2&gt;

&lt;h2 id=&#34;第三方应用程序被破解-导致所有使用该密码的数据被破解:d4ca46e8668838d4afbf263145f86af7&#34;&gt;第三方应用程序被破解，导致所有使用该密码的数据被破解。&lt;/h2&gt;

&lt;p&gt;OAuth 通过引入认证层和拆分资源拥有者角色，解决了上述问题。在 Oauth 中，客户端访问资源由资源拥有者和资源服务器所控制，&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vagrant挂载本地folder出错的解决方案</title>
      <link>http://blog.hanmq.com/post/vagrant-mount-folder/</link>
      <pubDate>Thu, 16 Jun 2016 17:31:08 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/vagrant-mount-folder/</guid>
      <description>

&lt;h2 id=&#34;问题:d10914a0617ca272838ce1ef356d7052&#34;&gt;问题&lt;/h2&gt;

&lt;p&gt;vagrant CentOS7 基础镜像，Vagrantfile 配置文件通过config.vm.synced_folder挂载本地目录报错&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Vagrantfile

config.vm.synced_folder &amp;quot;./Download&amp;quot;, &amp;quot;/Download&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vagrant up 启动时报错&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Failed to mount folders in Linux guest. This is usually because
the &amp;quot;vboxsf&amp;quot; file system is not available. Please verify that
the guest additions are properly installed in the guest and
can work properly. The command attempted was:

mount -t vboxsf -o uid=`id -u vagrant`,gid=`getent group vagrant | cut -d: -f3` vagrant /vagrant
mount -t vboxsf -o uid=`id -u vagrant`,gid=`id -g vagrant` vagrant /vagrant

The error output from the last command was:

/sbin/mount.vboxsf: mounting failed with the error: No such device
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;原因:d10914a0617ca272838ce1ef356d7052&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;查了一些网上的文章，最终查到，是因为执行了 yum update 导致 kernel-devel 的版本和系统当前版本不一样导致。&lt;/p&gt;

&lt;h2 id=&#34;解决方案:d10914a0617ca272838ce1ef356d7052&#34;&gt;解决方案&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;yum install kernel-devel-$(uname -r)
yum install kernel-headers-$(uname -r)
yum install dkms

cd /opt/VBoxGuestAdditions-*/init  
sudo ./vboxadd setup
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>家常面</title>
      <link>http://blog.hanmq.com/post/noodles/</link>
      <pubDate>Wed, 15 Jun 2016 13:43:24 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/noodles/</guid>
      <description>&lt;p&gt;川味素面&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hanmq.com/img/noodles.jpg&#34; width = &#34;300&#34; alt=&#34;家常面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;希望你的人生如这碗面，朴素简单，却令人回味无穷。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim添加solarized配色方案及vimrc基础设置</title>
      <link>http://blog.hanmq.com/post/vimrc-solarized/</link>
      <pubDate>Tue, 14 Jun 2016 10:51:00 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/vimrc-solarized/</guid>
      <description>

&lt;p&gt;为vim添加漂亮的 Solarized 配色方案,效果如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hanmq.com/img/solarized-vim.png&#34; alt=&#34;Solarized 效果图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Solarized 支持大部分编辑器及IDE,&lt;a href=&#34;http://ethanschoonover.com/solarized&#34; target=&#34;_blank&#34;&gt;官方网站&lt;/a&gt;在这里。&lt;/p&gt;

&lt;h2 id=&#34;vim-配置-solarized:ea903bc52c5adaba264c2d005a5fef95&#34;&gt;vim 配置 Solarized&lt;/h2&gt;

&lt;h3 id=&#34;download:ea903bc52c5adaba264c2d005a5fef95&#34;&gt;download&lt;/h3&gt;

&lt;p&gt;从github &lt;a href=&#34;https://github.com/altercation/vim-colors-solarized&#34;&gt;https://github.com/altercation/vim-colors-solarized&lt;/a&gt; 下载Vim-only 的仓库,即可完成vim的配置。&lt;/p&gt;

&lt;p&gt;主仓库在 &lt;a href=&#34;https://github.com/altercation/solarized&#34;&gt;https://github.com/altercation/solarized&lt;/a&gt; ,只配置vim的话可以忽略。&lt;/p&gt;

&lt;h3 id=&#34;install:ea903bc52c5adaba264c2d005a5fef95&#34;&gt;install&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd vim-colors-solarized/colors
$ mv solarized.vim ~/.vim/colors/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改.vimrc文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax enable
set background=dark
colorscheme solarized
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;background 支持 dark 和 light 两种配色方案&lt;/p&gt;

&lt;h3 id=&#34;mac-terminal-支持:ea903bc52c5adaba264c2d005a5fef95&#34;&gt;mac terminal 支持&lt;/h3&gt;

&lt;p&gt;mac terminal 需要在 colorschem solarized 前添加一行配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:solarized_termcolors=256
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;官方的描述是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you do use the custom terminal colors, solarized.vim should work out of the box for you. If you are using a terminal emulator that supports 256 colors and don&amp;rsquo;t want to use the custom Solarized terminal colors, you will need to use the degraded 256 colorscheme.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;vimrc-基础设置:ea903bc52c5adaba264c2d005a5fef95&#34;&gt;vimrc 基础设置&lt;/h2&gt;

&lt;p&gt;分享一下vimrc的基础设置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax enable               &amp;quot;语法高亮&amp;quot;
set background=dark
let g:solarized_termcolors=256
colorscheme solarized

set nocompatible            &amp;quot;不兼容vi&amp;quot;
set nu                      &amp;quot;显示行数&amp;quot;
set expandtab               &amp;quot;用空格代替tab&amp;quot;
set shiftwidth=4            &amp;quot;缩进的字符个数&amp;quot; 
set tabstop=4               &amp;quot;一个tab是4个字符&amp;quot;
set cursorline              &amp;quot;为光标所在行加下划线&amp;quot;
set autoread                &amp;quot;文件在Vim之外修改过，自动重新读入&amp;quot;
set ignorecase              &amp;quot;检索时忽略大小&amp;quot;
set fileencodings=utf-8,gbk &amp;quot;使用utf-8或gbk打开文件&amp;quot;
set hls                     &amp;quot;检索时高亮显示匹配项&amp;quot;
set ruler                   &amp;quot;显示光标当前位置&amp;quot;
set laststatus=2            &amp;quot;总是显示状态栏&amp;quot;
set backspace=indent,eol,start
set nowrap                  &amp;quot;禁止折行&amp;quot;

&amp;quot;恢复文件关闭之前光标的位置&amp;quot;
if has(&amp;quot;autocmd&amp;quot;)
au BufReadPost * if line(&amp;quot;&#39;\&amp;quot;&amp;quot;) &amp;gt; 1 &amp;amp;&amp;amp; line(&amp;quot;&#39;\&amp;quot;&amp;quot;) &amp;lt;= line(&amp;quot;$&amp;quot;) | exe &amp;quot;normal! g&#39;\&amp;quot;&amp;quot; | endif
endif

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>字节转换</title>
      <link>http://blog.hanmq.com/post/b-convert/</link>
      <pubDate>Mon, 13 Jun 2016 11:42:29 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/b-convert/</guid>
      <description>&lt;p&gt;一个简单的字节转换 PHP 方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

/**
 * 字节转换
 *
 * @param $size int 转换字节大小
 * @param $digits int 要保留几位小数
 * @return string
 */
function size2mb($size, $digits = 2) {
    //单位数组，是必须1024进制依次的哦
    $unit = array(&#39;&#39;,&#39;K&#39;,&#39;M&#39;,&#39;G&#39;,&#39;T&#39;,&#39;P&#39;);

    //对数的基数
    $base = 1024;

    //字节数对1024取对数，值向下取整
    $i = floor(log($size,$base));

    return round($size / pow($base,$i), $digits).&#39; &#39;.$unit[$i] . &#39;B&#39;;
}

/*
echo size2mb(3245345);
输出 : 3.1 MB

echo size2mb(2343453245345);
输出 : 2.13 TB
*/


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CentOS 7 systemd 添加系统服务 nginx</title>
      <link>http://blog.hanmq.com/post/centos7-systemd-nginx/</link>
      <pubDate>Mon, 13 Jun 2016 10:16:09 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/centos7-systemd-nginx/</guid>
      <description>

&lt;p&gt;CentOS 7继承了RHEL 7的新的特性，例如强大的systemd，而systemd的使用也使得以往系统服务的/etc/init.d的启动脚本的方式就此改变，大幅提高了系统服务的运行效率。&lt;/p&gt;

&lt;h2 id=&#34;systemd:1f81d4506716a68c23227f65602dc467&#34;&gt;systemd:&lt;/h2&gt;

&lt;p&gt;CentOS 7的服务systemctl脚本存放在：/usr/lib/systemd/。
有系统（system）和用户（user）之分，
即：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;/usr/lib/systemd/system&lt;/p&gt;

&lt;p&gt;/usr/lib/systemd/user&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每一个服务以.service结尾，一般会分为3部分：[Unit]、[Service]和[Install]，就以nginx为例吧，具体内容如下：&lt;/p&gt;

&lt;h2 id=&#34;创建service:1f81d4506716a68c23227f65602dc467&#34;&gt;创建service:&lt;/h2&gt;

&lt;p&gt;在 /usr/lib/systemd/system 下创建nginx.service文件内容如下（看应用需求也可以在 /usr/lib/systemd/usr 下创建）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Unit]
Description=nginx - high performance web server
Documentation=http://nginx.org/en/docs/
After=network.target remote-fs.target nss-lookup.target
 
[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf
ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true
 
[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;unit:1f81d4506716a68c23227f65602dc467&#34;&gt;[Unit]&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Description : 服务的简单描述&lt;/p&gt;

&lt;p&gt;Documentation ： 服务文档&lt;/p&gt;

&lt;p&gt;After : 依赖，仅当依赖的服务启动之后再启动自定义的服务单元&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;service:1f81d4506716a68c23227f65602dc467&#34;&gt;[Service]&lt;/h2&gt;

&lt;p&gt;这个段是 .service 文件独有的，也是对于服务配置最重要的部分。这部分的配置选项非常多，主要分为服务生命周期控制和服务上下文配置两个方面&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Type : 启动类型simple、forking、oneshot、notify、dbus&lt;/p&gt;

&lt;p&gt;PIDFile ： pid文件路径&lt;/p&gt;

&lt;p&gt;ExecStartPre ：指定在启动执行 ExecStart 的命令前的准备工作，可以有多个，所有命令会按照文件中书写的顺序依次被执行&lt;/p&gt;

&lt;p&gt;ExecStart：这个参数是几乎每个 .service 文件都会有的，指定服务启动的主要命令，在每个配置文件中只能使用一次&lt;/p&gt;

&lt;p&gt;ExecReload：重新加载服务所需执行的主要命令&lt;/p&gt;

&lt;p&gt;ExecStop：指定在 ExecStop 命令执行后的收尾工作，也可以有多个&lt;/p&gt;

&lt;p&gt;PrivateTmp：True表示给服务分配独立的临时空间≈&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;install:1f81d4506716a68c23227f65602dc467&#34;&gt;[Install]&lt;/h2&gt;

&lt;p&gt;这个段中的配置与 Unit 有几分相似，但是这部分配置需要通过 systemctl enable 命令来激活，并且可以通过 systemctl disable 命令禁用。另外这部分配置的目标模块通常是特定启动级别的 .target 文件，用来使得服务在系统启动时自动运行。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WantedBy：上例中使用的是 “WantedBy=multi-user.target”， 表明当系统以多用户方式（默认的运行级别）启动时，这个服务需要被自动运行。当然还需要 systemctl enable 激活这个服务以后自动运行才会生效。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;操作service:1f81d4506716a68c23227f65602dc467&#34;&gt;操作Service:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#修改权限
$ sudo chmod +x /usr/lib/systemd/system/nginx.service

$ sudo systemctl enable nginx.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就会在/etc/systemd/system/multi-user.target.wants/目录下新建一个/usr/lib/systemd/system/nginx.service 文件的链接。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#启动服务
$ sudo systemctl start nginx.service

#查看日志
$ sudo journalctl -f -u nginx.service
-- Logs begin at 四 2015-06-25 17:32:20 CST. --
6月 25 10:28:24 Leco.lan systemd[1]: Starting nginx - high performance web server...
6月 25 10:28:24 Leco.lan nginx[7976]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
6月 25 10:28:24 Leco.lan nginx[7976]: nginx: configuration file /etc/nginx/nginx.conf test is successful
6月 25 10:28:24 Leco.lan systemd[1]: Started nginx - high performance web server.

#重启
$ sudo systemctl restart nginx.service

#重载
$ sudo systemctl reload nginx.service

#停止
$ sudo systemctl stop nginx.service
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>hello hugo</title>
      <link>http://blog.hanmq.com/post/hello-hugo/</link>
      <pubDate>Mon, 13 Jun 2016 09:40:05 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/hello-hugo/</guid>
      <description>&lt;p&gt;开张&lt;/p&gt;

&lt;p&gt;基于 &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主题 &lt;a href=&#34;https://github.com/coderzh/hugo-pacman-theme&#34; target=&#34;_blank&#34;&gt;hugo-pacman-theme&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.hanmq.com/post/mou/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.hanmq.com/post/mou/</guid>
      <description>

&lt;h1 id=&#34;mou:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Mou&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://25.io/mou/Mou_128.png&#34; alt=&#34;Mou icon&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Mou&lt;/strong&gt;, the missing Markdown editor for &lt;em&gt;web developers&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;syntax:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Syntax&lt;/h3&gt;

&lt;h4 id=&#34;strong-and-emphasize:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Strong and Emphasize&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;strong&lt;/strong&gt; or &lt;strong&gt;strong&lt;/strong&gt; ( Cmd + B )&lt;/p&gt;

&lt;p&gt;&lt;em&gt;emphasize&lt;/em&gt; or &lt;em&gt;emphasize&lt;/em&gt; ( Cmd + I )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sometimes I want a lot of text to be bold.
Like, seriously, a &lt;em&gt;LOT&lt;/em&gt; of text&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;blockquotes:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Blockquotes&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Right angle brackets &amp;gt; are used for block quotes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;links-and-email:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Links and Email&lt;/h4&gt;

&lt;p&gt;An email &lt;a href=&#34;mailto:example@example.com&#34;&gt;example@example.com&lt;/a&gt; link.&lt;/p&gt;

&lt;p&gt;Simple inline link &lt;a href=&#34;http://chenluois.com&#34;&gt;http://chenluois.com&lt;/a&gt;, another inline link &lt;a href=&#34;http://25.io/smaller/&#34;&gt;Smaller&lt;/a&gt;, one more inline link with title &lt;a href=&#34;http://resizesafari.com&#34; title=&#34;a Safari extension&#34;&gt;Resize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://25.io/mou/&#34; title=&#34;Markdown editor on Mac OS X&#34;&gt;reference style&lt;/a&gt; link. Input id, then anywhere in the doc, define the link with corresponding id:&lt;/p&gt;

&lt;p&gt;Titles ( or called tool tips ) in the links are optional.&lt;/p&gt;

&lt;h4 id=&#34;images:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Images&lt;/h4&gt;

&lt;p&gt;An inline image &lt;img src=&#34;http://25.io/smaller/favicon.ico&#34; alt=&#34;Smaller icon&#34; title=&#34;Title here&#34; /&gt;, title is optional.&lt;/p&gt;

&lt;p&gt;A &lt;img src=&#34;http://resizesafari.com/favicon.ico&#34; alt=&#34;Resize icon&#34; title=&#34;Title&#34; /&gt; reference style image.&lt;/p&gt;

&lt;h4 id=&#34;inline-code-and-block-code:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Inline code and Block code&lt;/h4&gt;

&lt;p&gt;Inline code are surround by &lt;code&gt;backtick&lt;/code&gt; key. To create a block code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Indent each line by at least 1 tab, or 4 spaces.
var Mou = exactlyTheAppIwant; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ordered-lists:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Ordered Lists&lt;/h4&gt;

&lt;p&gt;Ordered lists are created using &amp;ldquo;1.&amp;rdquo; + Space:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ordered list item&lt;/li&gt;
&lt;li&gt;Ordered list item&lt;/li&gt;
&lt;li&gt;Ordered list item&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;unordered-lists:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Unordered Lists&lt;/h4&gt;

&lt;p&gt;Unordered list are created using &amp;ldquo;*&amp;rdquo; + Space:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unordered list item&lt;/li&gt;
&lt;li&gt;Unordered list item&lt;/li&gt;
&lt;li&gt;Unordered list item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or using &amp;ldquo;-&amp;rdquo; + Space:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unordered list item&lt;/li&gt;
&lt;li&gt;Unordered list item&lt;/li&gt;
&lt;li&gt;Unordered list item&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;hard-linebreak:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Hard Linebreak&lt;/h4&gt;

&lt;p&gt;End a line with two or more spaces will create a hard linebreak, called &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; in HTML. ( Control + Return )&lt;br /&gt;
Above line ended with 2 spaces.&lt;/p&gt;

&lt;h4 id=&#34;horizontal-rules:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Horizontal Rules&lt;/h4&gt;

&lt;p&gt;Three or more asterisks or dashes:&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;headers:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Headers&lt;/h4&gt;

&lt;p&gt;Setext-style:&lt;/p&gt;

&lt;h1 id=&#34;this-is-h1:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;This is H1&lt;/h1&gt;

&lt;h2 id=&#34;this-is-h2:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;This is H2&lt;/h2&gt;

&lt;p&gt;atx-style:&lt;/p&gt;

&lt;h1 id=&#34;this-is-h1-1:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;This is H1&lt;/h1&gt;

&lt;h2 id=&#34;this-is-h2-1:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;This is H2&lt;/h2&gt;

&lt;h3 id=&#34;this-is-h3:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;This is H3&lt;/h3&gt;

&lt;h4 id=&#34;this-is-h4:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;This is H4&lt;/h4&gt;

&lt;h5 id=&#34;this-is-h5:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;This is H5&lt;/h5&gt;

&lt;h6 id=&#34;this-is-h6:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;This is H6&lt;/h6&gt;

&lt;h3 id=&#34;extra-syntax:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Extra Syntax&lt;/h3&gt;

&lt;h4 id=&#34;footnotes:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Footnotes&lt;/h4&gt;

&lt;p&gt;Footnotes work mostly like reference-style links. A footnote is made of two things: a marker in the text that will become a superscript number; a footnote definition that will be placed in a list of footnotes at the end of the document. A footnote looks like this:&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s some text with a footnote.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b1ff186a3d5371702e52e8e944bfb201:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b1ff186a3d5371702e52e8e944bfb201:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h4 id=&#34;strikethrough:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Strikethrough&lt;/h4&gt;

&lt;p&gt;Wrap with 2 tilde characters:&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Strikethrough&lt;/del&gt;&lt;/p&gt;

&lt;h4 id=&#34;fenced-code-blocks:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Fenced Code Blocks&lt;/h4&gt;

&lt;p&gt;Start with a line containing 3 or more backticks, and ends with the first line with the same number of backticks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fenced code blocks are like Stardard Markdown’s regular code
blocks, except that they’re not indented and instead rely on
a start and end fence lines to delimit the code block.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;tables:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Tables&lt;/h4&gt;

&lt;p&gt;A simple table looks like this:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;th&gt;Third Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you wish, you can add a leading and tailing pipe to each line of the table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;th&gt;Third Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Specify alignment for each column by adding colons to separator lines:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;First Header&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Second Header&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Third Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Left&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Center&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Right&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Left&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Center&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Right&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;shortcuts:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Shortcuts&lt;/h3&gt;

&lt;h4 id=&#34;view:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;View&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Toggle live preview: Shift + Cmd + I&lt;/li&gt;
&lt;li&gt;Toggle Words Counter: Shift + Cmd + W&lt;/li&gt;
&lt;li&gt;Toggle Transparent: Shift + Cmd + T&lt;/li&gt;
&lt;li&gt;Toggle Floating: Shift + Cmd + F&lt;/li&gt;
&lt;li&gt;Left/Right = &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;: Cmd + 0&lt;/li&gt;
&lt;li&gt;Left/Right = &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;: Cmd + +&lt;/li&gt;
&lt;li&gt;Left/Right = &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;: Cmd + -&lt;/li&gt;
&lt;li&gt;Toggle Writing orientation: Cmd + L&lt;/li&gt;
&lt;li&gt;Toggle fullscreen: Control + Cmd + F&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;actions:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Actions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Copy HTML: Option + Cmd + C&lt;/li&gt;
&lt;li&gt;Strong: Select text, Cmd + B&lt;/li&gt;
&lt;li&gt;Emphasize: Select text, Cmd + I&lt;/li&gt;
&lt;li&gt;Inline Code: Select text, Cmd + K&lt;/li&gt;
&lt;li&gt;Strikethrough: Select text, Cmd + U&lt;/li&gt;
&lt;li&gt;Link: Select text, Control + Shift + L&lt;/li&gt;
&lt;li&gt;Image: Select text, Control + Shift + I&lt;/li&gt;
&lt;li&gt;Select Word: Control + Option + W&lt;/li&gt;
&lt;li&gt;Select Line: Shift + Cmd + L&lt;/li&gt;
&lt;li&gt;Select All: Cmd + A&lt;/li&gt;
&lt;li&gt;Deselect All: Cmd + D&lt;/li&gt;
&lt;li&gt;Convert to Uppercase: Select text, Control + U&lt;/li&gt;
&lt;li&gt;Convert to Lowercase: Select text, Control + Shift + U&lt;/li&gt;
&lt;li&gt;Convert to Titlecase: Select text, Control + Option + U&lt;/li&gt;
&lt;li&gt;Convert to List: Select lines, Control + L&lt;/li&gt;
&lt;li&gt;Convert to Blockquote: Select lines, Control + Q&lt;/li&gt;
&lt;li&gt;Convert to H1: Cmd + 1&lt;/li&gt;
&lt;li&gt;Convert to H2: Cmd + 2&lt;/li&gt;
&lt;li&gt;Convert to H3: Cmd + 3&lt;/li&gt;
&lt;li&gt;Convert to H4: Cmd + 4&lt;/li&gt;
&lt;li&gt;Convert to H5: Cmd + 5&lt;/li&gt;
&lt;li&gt;Convert to H6: Cmd + 6&lt;/li&gt;
&lt;li&gt;Convert Spaces to Tabs: Control + [&lt;/li&gt;
&lt;li&gt;Convert Tabs to Spaces: Control + ]&lt;/li&gt;
&lt;li&gt;Insert Current Date: Control + Shift + 1&lt;/li&gt;
&lt;li&gt;Insert Current Time: Control + Shift + 2&lt;/li&gt;
&lt;li&gt;Insert entity &amp;lt;: Control + Shift + ,&lt;/li&gt;
&lt;li&gt;Insert entity &amp;gt;: Control + Shift + .&lt;/li&gt;
&lt;li&gt;Insert entity &amp;amp;: Control + Shift + 7&lt;/li&gt;
&lt;li&gt;Insert entity Space: Control + Shift + Space&lt;/li&gt;
&lt;li&gt;Insert Scriptogr.am Header: Control + Shift + G&lt;/li&gt;
&lt;li&gt;Shift Line Left: Select lines, Cmd + [&lt;/li&gt;
&lt;li&gt;Shift Line Right: Select lines, Cmd + ]&lt;/li&gt;
&lt;li&gt;New Line: Cmd + Return&lt;/li&gt;
&lt;li&gt;Comment: Cmd + /&lt;/li&gt;
&lt;li&gt;Hard Linebreak: Control + Return&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;edit:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Edit&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Auto complete current word: Esc&lt;/li&gt;
&lt;li&gt;Find: Cmd + F&lt;/li&gt;
&lt;li&gt;Close find bar: Esc&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;post:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Post&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Post on Scriptogr.am: Control + Shift + S&lt;/li&gt;
&lt;li&gt;Post on Tumblr: Control + Shift + T&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;export:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;Export&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Export HTML: Option + Cmd + E&lt;/li&gt;
&lt;li&gt;Export PDF:  Option + Cmd + P&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;and-more:b1ff186a3d5371702e52e8e944bfb201&#34;&gt;And more?&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t forget to check Preferences, lots of useful options are there.&lt;/p&gt;

&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/mou&#34;&gt;@Mou&lt;/a&gt; on Twitter for the latest news.&lt;/p&gt;

&lt;p&gt;For feedback, use the menu &lt;code&gt;Help&lt;/code&gt; - &lt;code&gt;Send Feedback&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:b1ff186a3d5371702e52e8e944bfb201:1&#34;&gt;And that&amp;rsquo;s the footnote.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b1ff186a3d5371702e52e8e944bfb201:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
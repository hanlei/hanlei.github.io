<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 牧青日志</title>
    <link>http://blog.hanmq.com/tags/mysql/</link>
    <description>Recent content in Mysql on 牧青日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 05 Feb 2017 20:48:00 +0800</lastBuildDate>
    <atom:link href="http://blog.hanmq.com/tags/mysql/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL事务隔离级别详解</title>
      <link>http://blog.hanmq.com/post/transaction-isolation-level/</link>
      <pubDate>Sun, 05 Feb 2017 20:48:00 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/transaction-isolation-level/</guid>
      <description>

&lt;h1 id=&#34;概述:50330dfe917dc5c6c4acf65f81f6cd47&#34;&gt;概述&lt;/h1&gt;

&lt;p&gt;MySQL事务一共有4个隔离级别，分别是&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read Uncommitted&lt;/li&gt;
&lt;li&gt;Read Committed&lt;/li&gt;
&lt;li&gt;Repeatable Read&lt;/li&gt;
&lt;li&gt;Serializable&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;隔离级别&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;脏读&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;不可重复读&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;幻读&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;加锁读&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Read Uncommitted&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Read Committed&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Repeatable Read&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Serializable&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;x&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;MySQL默认隔离级别是Repeatable Read。&lt;/p&gt;

&lt;h2 id=&#34;read-uncommitted-读取未提交内容:50330dfe917dc5c6c4acf65f81f6cd47&#34;&gt;Read Uncommitted（读取未提交内容）&lt;/h2&gt;

&lt;p&gt;所有事务可以看到其他事务未提交的数据，读取未提交的数据，称作脏读（Dirty Read）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;session 1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; set session transaction isolation level read uncommitted;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; select @@tx_isolation;
+------------------+
| @@tx_isolation   |
+------------------+
| READ-UNCOMMITTED |
+------------------+
1 row in set (0.00 sec)

MariaDB [test]&amp;gt; select * from test;
+----+-----+
| id | num |
+----+-----+
|  1 |   1 |
|  2 |   2 |
+----+-----+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;session 2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; update test set num = 20 where id = 2;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;session 1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; select * from test;
+----+-----+
| id | num |
+----+-----+
|  1 |   1 |
|  2 |  20 |
+----+-----+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;session 2 并没有commit，session 1 可以读到其他事务未提交的数据。&lt;/p&gt;

&lt;h2 id=&#34;read-committed-读取提交内容:50330dfe917dc5c6c4acf65f81f6cd47&#34;&gt;Read Committed（读取提交内容）&lt;/h2&gt;

&lt;p&gt;它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别也叫做不可重复读（Nonrepeatable Read），因为两次查询可能返回不同结果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;session 1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; set session transaction isolation level read committed;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; select @@tx_isolation;
+----------------+
| @@tx_isolation |
+----------------+
| READ-COMMITTED |
+----------------+
1 row in set (0.00 sec)

MariaDB [test]&amp;gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; select * from test;
+----+-----+
| id | num |
+----+-----+
|  1 |   1 |
|  2 |  20 |
+----+-----+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;session 2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; update test set num = 200 where id = 2;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [test]&amp;gt; select * from test;
+----+-----+
| id | num |
+----+-----+
|  1 |   1 |
|  2 | 200 |
+----+-----+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;session 1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; select * from test;
+----+-----+
| id | num |
+----+-----+
|  1 |   1 |
|  2 |  20 |
+----+-----+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;session 2 并没有commit，并没有读到事务中未提交的数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;session 2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;session 1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; select * from test;
+----+-----+
| id | num |
+----+-----+
|  1 |   1 |
|  2 | 200 |
+----+-----+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;session 1 读取到提交数据，但是session 1在一个事务中，两次查询结果不一致。&lt;/p&gt;

&lt;h2 id=&#34;repeatable-read-可重读:50330dfe917dc5c6c4acf65f81f6cd47&#34;&gt;Repeatable Read（可重读）&lt;/h2&gt;

&lt;p&gt;这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;session 1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; set session transaction isolation level repeatable read;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; select @@tx_isolation;
+-----------------+
| @@tx_isolation  |
+-----------------+
| REPEATABLE-READ |
+-----------------+
1 row in set (0.00 sec)

MariaDB [test]&amp;gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; select * from test;
+----+-----+
| id | num |
+----+-----+
|  1 |   1 |
|  2 | 200 |
+----+-----+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;session 2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; start transaction;
Query OK, 0 rows affected (0.01 sec)

MariaDB [test]&amp;gt; update test set num = 2000 where id = 2;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [test]&amp;gt; insert into test (id,num) value(3,3);
Query OK, 1 row affected (0.00 sec)

MariaDB [test]&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; select * from test;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 | 2000 |
|  3 |    3 |
+----+------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;session 1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; select * from test;
+----+-----+
| id | num |
+----+-----+
|  1 |   1 |
|  2 | 200 |
+----+-----+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;session 1 在同一个事务中，读取同一条数据保持一致，但并没有读取到session 2添加的新数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;session 1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; select * from test;
+----+------+
| id | num  |
+----+------+
|  1 |    1 |
|  2 | 2000 |
|  3 |    3 |
+----+------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;session 1 commit后，可看到新添加的数据（幻影行）。&lt;/p&gt;

&lt;h2 id=&#34;serializable-可串行化:50330dfe917dc5c6c4acf65f81f6cd47&#34;&gt;Serializable（可串行化）&lt;/h2&gt;

&lt;p&gt;这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;session 1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; set session transaction isolation level serializable;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; select @@tx_isolation;
+----------------+
| @@tx_isolation |
+----------------+
| SERIALIZABLE   |
+----------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;session 2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [test]&amp;gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

MariaDB [test]&amp;gt; insert into test (id,num) value(4,4);
ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;session 1 读锁，session 2 并不能插入数据。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>高性能MySQL</title>
      <link>http://blog.hanmq.com/post/high-performance-mysql-01/</link>
      <pubDate>Sat, 04 Feb 2017 15:38:00 +0800</pubDate>
      
      <guid>http://blog.hanmq.com/post/high-performance-mysql-01/</guid>
      <description>

&lt;h2 id=&#34;mysql逻辑构架:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;MySQL逻辑构架&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.hanmq.com/img/mysql01.png&#34; width = &#34;300&#34; alt=&#34;MySQL服务器构架逻辑图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最上层：连接处理、授权认证、安全等。&lt;/p&gt;

&lt;p&gt;中间层：大多数MySQL核心服务，查询解析、分析、优化、缓存及内置函数（日期时间、数学和加密等）。&lt;/p&gt;

&lt;p&gt;第三层：存储引擎，负责MqlSQL数据的存储和提取，服务器通过API与存储引擎通信，屏蔽了不同存储引擎之间的差异。&lt;/p&gt;

&lt;h2 id=&#34;并发控制:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;并发控制&lt;/h2&gt;

&lt;h3 id=&#34;锁:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;锁&lt;/h3&gt;

&lt;p&gt;共享锁和排它锁，也就是读锁和写锁。&lt;/p&gt;

&lt;h3 id=&#34;锁粒度:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;锁粒度&lt;/h3&gt;

&lt;p&gt;锁的开销和安全之间寻求平衡。&lt;/p&gt;

&lt;h4 id=&#34;表锁:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;表锁&lt;/h4&gt;

&lt;p&gt;MySQL中最基础的锁策略，开销最小。&lt;/p&gt;

&lt;p&gt;尽管存储引擎可以管理自己的锁，MySQL本身会使用各种有效的锁来实现不同的目的，例如在 ALTER TABLE 会使用表锁，而忽略存储引擎的锁机制。&lt;/p&gt;

&lt;h4 id=&#34;行级锁:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;行级锁&lt;/h4&gt;

&lt;p&gt;最大程度的支持并发处理（同时带来最大的锁开销），由存储引擎实现。&lt;/p&gt;

&lt;h2 id=&#34;事务:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;事务&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;原子性(atomicity)&lt;/li&gt;
&lt;li&gt;一致性(consistency)&lt;/li&gt;
&lt;li&gt;隔离型(isolation)&lt;/li&gt;
&lt;li&gt;持久性(durablility)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有存储引擎实现，所以在同一个事务中，使用多种存储引擎是不可靠的。&lt;/p&gt;

&lt;h3 id=&#34;隔离级别:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;隔离级别&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;READ UNCOMMITTED（未提交读）

&lt;ul&gt;
&lt;li&gt;事务中的修改，即使没有提交，对其他事务也是可见的。&lt;/li&gt;
&lt;li&gt;事务读到未提交数据，这称为脏读。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;READ COMMITTED（提交读），也叫不可重复读(nonrepeatable read)

&lt;ul&gt;
&lt;li&gt;满足事务的隔离性的简单定义。&lt;/li&gt;
&lt;li&gt;一个事务开始知道提交之前，所做的修改对其他事务是不可见的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;REPEATABLE READ（可重复读）

&lt;ul&gt;
&lt;li&gt;可产生幻读&lt;/li&gt;
&lt;li&gt;MySQL默认隔离级别&lt;/li&gt;
&lt;li&gt;InnoDB通过版本并发控制解决了幻读&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SERIALIZABLE（可串行化）

&lt;ul&gt;
&lt;li&gt;解决了幻读&lt;/li&gt;
&lt;li&gt;读取每一行数据加锁，可能会导致大量的超时和锁争用问题&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;多版本并发控制:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;多版本并发控制&lt;/h2&gt;

&lt;p&gt;和行级锁一样，实现了非阻塞读操作，可以说是行级锁的一个变种，但并不需要加锁操作，因此开销更低。&lt;/p&gt;

&lt;p&gt;mvcc的实现，是通过保存数据在某个时间点的快照实现的。&lt;/p&gt;

&lt;p&gt;通过两个隐藏列，创建时间和过期时间实现。&lt;/p&gt;

&lt;p&gt;mvcc只再READ COMMITTED和REPEATABLE READ两个隔离级别生效，READ UNCOMMITTED总是读最新的数据行，SERIALIZABLE会怼所有读取的行加锁。&lt;/p&gt;

&lt;h2 id=&#34;存储引擎:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;存储引擎&lt;/h2&gt;

&lt;h3 id=&#34;innodb:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;InnoDB&lt;/h3&gt;

&lt;p&gt;基于聚簇索引，对主键查询有很高的性能，耳机索引中必须包含主键列。&lt;/p&gt;

&lt;h3 id=&#34;myisam:51879d4aec6f5c72f71a4a60a0197de3&#34;&gt;MyISAM&lt;/h3&gt;

&lt;p&gt;不支持事务和行级锁。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>